generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model kkutu_ko {
  id    String  @id(map: "kkutu_kr_key") @map("_id") @db.VarChar(256)
  type  String?
  mean  String
  hit   Int     @default(0)
  flag  Int?
  theme String?
}

model User {
  id           String         @id
  name         String
  score        Int            @default(0)
  provider     String
  password     String?
  roomId       String?
  refreshToken String?
  character    Character?
  keyboard     Keyboard?
  room         Room?          @relation(fields: [roomId], references: [id])
  emoji        UserGetEmoji[]
  item         UserGetItem[]
}

model Room {
  id        String   @id @default(uuid())
  title     String
  password  String?
  type      Int
  option    String[]
  start     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  round     Int
  total     Int
  users     User[]
}

model Dictionary {
  id    String  @id @map("_id") @db.VarChar
  type  String?
  mean  String?
  meta  Json?   @db.Json
  hit   Int     @default(0)
  wakta Boolean @default(false)

  @@map("wakttu_ko")
}

model Quiz {
  id          Int      @id @default(autoincrement())
  type        String
  question    String
  hint        String[]
  tag         String[]
  description String
  answer      String[]
  select      String[]
  meta        Json?    @db.Json

  @@map("wakttu_quiz")
}

model Manner {
  id String @id @map("_id") @db.VarChar

  @@map("wakttu_manner")
}

model Keyboard {
  id     Int     @id @default(autoincrement()) @map("_id")
  userId String  @unique
  user   User    @relation(fields: [userId], references: [id])
  emoji  Emoji[] @relation("EmojiToKeyboard")
}

model Emoji {
  id        String         @id @map("_id") @db.VarChar
  name      String
  url       String
  users     UserGetEmoji[]
  keyboards Keyboard[]     @relation("EmojiToKeyboard")
}

model UserGetEmoji {
  userId    String
  emojiId   String
  createdAt DateTime @default(now()) @map("created_at")
  emoji     Emoji    @relation(fields: [emojiId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, emojiId])
  @@map("user_get_emoji")
}

model Character {
  userId String @unique
  skinId String
  headId String
  handId String
  eyeId  String
  eye    Item   @relation("eye", fields: [eyeId], references: [id])
  hand   Item   @relation("hand", fields: [handId], references: [id])
  head   Item   @relation("head", fields: [headId], references: [id])
  skin   Item   @relation("skin", fields: [skinId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model Item {
  id          String        @id @map("_id")
  name        String
  categroy    String
  description String
  author      String
  url         String
  eye         Character[]   @relation("eye")
  hand        Character[]   @relation("hand")
  head        Character[]   @relation("head")
  skin        Character[]   @relation("skin")
  user        UserGetItem[]
}

model UserGetItem {
  userId    String
  itemId    String
  createdAt DateTime @default(now()) @map("created_at")
  item      Item     @relation(fields: [itemId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, itemId])
  @@map("user_get_item")
}

model wakttu_meme {
  id      String   @id @map("_id") @db.VarChar
  keyword String
  mean    String
  info    String
  tag     String[]
  meta    Json?
}
