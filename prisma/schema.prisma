generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model kkutu_ko {
  id    String  @id(map: "kkutu_kr_key") @map("_id") @db.VarChar(256)
  type  String?
  mean  String
  hit   Int     @default(0)
  flag  Int?
  theme String?
}

model User {
  id       String         @id
  name     String         @unique
  score    Int            @default(0)
  provider String
  password String?
  roomId   String?
  room     Room?          @relation(fields: [roomId], references: [id])
  keyboard Keyboard?
  emoji    UserGetEmoji[]
  character Character?
  item     UserGetItem[]
}

model Room {
  id        String   @id @default(uuid())
  title     String
  password  String?
  type      Int
  option    String[]
  start     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  round     Int
  total     Int
  users     User[]
}

model Dictionary {
  id    String  @id @map("_id") @db.VarChar
  type  String?
  mean  String?
  meta  Json?   @db.Json
  hit   Int     @default(0)
  wakta Boolean @default(false)

  @@map("wakttu_ko")
}

model Quiz {
  id          Int      @id @default(autoincrement())
  type        String
  question    String
  hint        String[]
  tag         String[]
  description String
  answer      String[]
  select      String[]
  meta        Json?    @db.Json

  @@map("wakttu_quiz")
}

model Manner {
  id String @id @map("_id") @db.VarChar

  @@map("wakttu_manner")
}

model Keyboard {
  id     Int     @id @default(autoincrement()) @map("_id")
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique
  emoji  Emoji[]
}

model Emoji {
  id        String         @id @map("_id") @db.VarChar
  name      String
  url       String
  keyboards Keyboard[]
  users     UserGetEmoji[]
}

model UserGetEmoji {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  emoji     Emoji    @relation(fields: [emojiId], references: [id])
  emojiId   String
  createdAt DateTime @default(now()) @map("created_at")

  @@id([userId, emojiId])
  @@map("user_get_emoji")
}

model Character {
  user User @relation(fields: [userId],references: [id])
  userId String @unique
  skin Item @relation("skin",fields: [skinId],references: [id])
	skinId String
	head Item @relation("head",fields: [headId],references: [id])
  headId String
	hand Item @relation("hand",fields: [handId],references: [id])
  handId String 
	eye Item @relation("eye",fields: [eyeId],references: [id])
  eyeId String
}

model Item {
  id String @id @map("_id")
  name String
  categroy String
  description String
  author String
  url String
  user UserGetItem[]
  skin Character[] @relation("skin")
  head Character[] @relation("head")
  hand Character[] @relation("hand")
  eye Character[] @relation("eye")
}

model UserGetItem {
   user      User     @relation(fields: [userId], references: [id])
  userId    String
  item     Item    @relation(fields: [itemId], references: [id])
  itemId   String
  createdAt DateTime @default(now()) @map("created_at")

  @@id([userId, itemId])
  @@map("user_get_item")
}

